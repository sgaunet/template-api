// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service_test

import (
	"context"
	"sync"

	"github.com/sgaunet/template-api/internal/repository"
)

// Ensure, that QuerierMock does implement repository.Querier.
// If this is not the case, regenerate this file with moq.
var _ repository.Querier = &QuerierMock{}

// QuerierMock is a mock implementation of repository.Querier.
//
//	func TestSomethingThatUsesQuerier(t *testing.T) {
//
//		// make and configure a mocked repository.Querier
//		mockedQuerier := &QuerierMock{
//			CreateAuthorFunc: func(ctx context.Context, arg repository.CreateAuthorParams) (repository.Author, error) {
//				panic("mock out the CreateAuthor method")
//			},
//			CreateBookFunc: func(ctx context.Context, arg repository.CreateBookParams) (repository.Book, error) {
//				panic("mock out the CreateBook method")
//			},
//			DeleteAuthorFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the DeleteAuthor method")
//			},
//			DeleteBookFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the DeleteBook method")
//			},
//			GetAuthorFunc: func(ctx context.Context, id int64) (repository.Author, error) {
//				panic("mock out the GetAuthor method")
//			},
//			GetBookFunc: func(ctx context.Context, id int64) (repository.Book, error) {
//				panic("mock out the GetBook method")
//			},
//			ListAuthorsFunc: func(ctx context.Context) ([]repository.Author, error) {
//				panic("mock out the ListAuthors method")
//			},
//			ListBooksFunc: func(ctx context.Context) ([]repository.Book, error) {
//				panic("mock out the ListBooks method")
//			},
//			PartialUpdateAuthorFunc: func(ctx context.Context, arg repository.PartialUpdateAuthorParams) (repository.Author, error) {
//				panic("mock out the PartialUpdateAuthor method")
//			},
//			UpdateAuthorFunc: func(ctx context.Context, arg repository.UpdateAuthorParams) (repository.Author, error) {
//				panic("mock out the UpdateAuthor method")
//			},
//			UpdateTitleBookFunc: func(ctx context.Context, arg repository.UpdateTitleBookParams) (repository.Book, error) {
//				panic("mock out the UpdateTitleBook method")
//			},
//		}
//
//		// use mockedQuerier in code that requires repository.Querier
//		// and then make assertions.
//
//	}
type QuerierMock struct {
	// CreateAuthorFunc mocks the CreateAuthor method.
	CreateAuthorFunc func(ctx context.Context, arg repository.CreateAuthorParams) (repository.Author, error)

	// CreateBookFunc mocks the CreateBook method.
	CreateBookFunc func(ctx context.Context, arg repository.CreateBookParams) (repository.Book, error)

	// DeleteAuthorFunc mocks the DeleteAuthor method.
	DeleteAuthorFunc func(ctx context.Context, id int64) error

	// DeleteBookFunc mocks the DeleteBook method.
	DeleteBookFunc func(ctx context.Context, id int64) error

	// GetAuthorFunc mocks the GetAuthor method.
	GetAuthorFunc func(ctx context.Context, id int64) (repository.Author, error)

	// GetBookFunc mocks the GetBook method.
	GetBookFunc func(ctx context.Context, id int64) (repository.Book, error)

	// ListAuthorsFunc mocks the ListAuthors method.
	ListAuthorsFunc func(ctx context.Context) ([]repository.Author, error)

	// ListBooksFunc mocks the ListBooks method.
	ListBooksFunc func(ctx context.Context) ([]repository.Book, error)

	// PartialUpdateAuthorFunc mocks the PartialUpdateAuthor method.
	PartialUpdateAuthorFunc func(ctx context.Context, arg repository.PartialUpdateAuthorParams) (repository.Author, error)

	// UpdateAuthorFunc mocks the UpdateAuthor method.
	UpdateAuthorFunc func(ctx context.Context, arg repository.UpdateAuthorParams) (repository.Author, error)

	// UpdateTitleBookFunc mocks the UpdateTitleBook method.
	UpdateTitleBookFunc func(ctx context.Context, arg repository.UpdateTitleBookParams) (repository.Book, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAuthor holds details about calls to the CreateAuthor method.
		CreateAuthor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg repository.CreateAuthorParams
		}
		// CreateBook holds details about calls to the CreateBook method.
		CreateBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg repository.CreateBookParams
		}
		// DeleteAuthor holds details about calls to the DeleteAuthor method.
		DeleteAuthor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// DeleteBook holds details about calls to the DeleteBook method.
		DeleteBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetAuthor holds details about calls to the GetAuthor method.
		GetAuthor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetBook holds details about calls to the GetBook method.
		GetBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// ListAuthors holds details about calls to the ListAuthors method.
		ListAuthors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListBooks holds details about calls to the ListBooks method.
		ListBooks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// PartialUpdateAuthor holds details about calls to the PartialUpdateAuthor method.
		PartialUpdateAuthor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg repository.PartialUpdateAuthorParams
		}
		// UpdateAuthor holds details about calls to the UpdateAuthor method.
		UpdateAuthor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg repository.UpdateAuthorParams
		}
		// UpdateTitleBook holds details about calls to the UpdateTitleBook method.
		UpdateTitleBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg repository.UpdateTitleBookParams
		}
	}
	lockCreateAuthor        sync.RWMutex
	lockCreateBook          sync.RWMutex
	lockDeleteAuthor        sync.RWMutex
	lockDeleteBook          sync.RWMutex
	lockGetAuthor           sync.RWMutex
	lockGetBook             sync.RWMutex
	lockListAuthors         sync.RWMutex
	lockListBooks           sync.RWMutex
	lockPartialUpdateAuthor sync.RWMutex
	lockUpdateAuthor        sync.RWMutex
	lockUpdateTitleBook     sync.RWMutex
}

// CreateAuthor calls CreateAuthorFunc.
func (mock *QuerierMock) CreateAuthor(ctx context.Context, arg repository.CreateAuthorParams) (repository.Author, error) {
	if mock.CreateAuthorFunc == nil {
		panic("QuerierMock.CreateAuthorFunc: method is nil but Querier.CreateAuthor was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg repository.CreateAuthorParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateAuthor.Lock()
	mock.calls.CreateAuthor = append(mock.calls.CreateAuthor, callInfo)
	mock.lockCreateAuthor.Unlock()
	return mock.CreateAuthorFunc(ctx, arg)
}

// CreateAuthorCalls gets all the calls that were made to CreateAuthor.
// Check the length with:
//
//	len(mockedQuerier.CreateAuthorCalls())
func (mock *QuerierMock) CreateAuthorCalls() []struct {
	Ctx context.Context
	Arg repository.CreateAuthorParams
} {
	var calls []struct {
		Ctx context.Context
		Arg repository.CreateAuthorParams
	}
	mock.lockCreateAuthor.RLock()
	calls = mock.calls.CreateAuthor
	mock.lockCreateAuthor.RUnlock()
	return calls
}

// CreateBook calls CreateBookFunc.
func (mock *QuerierMock) CreateBook(ctx context.Context, arg repository.CreateBookParams) (repository.Book, error) {
	if mock.CreateBookFunc == nil {
		panic("QuerierMock.CreateBookFunc: method is nil but Querier.CreateBook was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg repository.CreateBookParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateBook.Lock()
	mock.calls.CreateBook = append(mock.calls.CreateBook, callInfo)
	mock.lockCreateBook.Unlock()
	return mock.CreateBookFunc(ctx, arg)
}

// CreateBookCalls gets all the calls that were made to CreateBook.
// Check the length with:
//
//	len(mockedQuerier.CreateBookCalls())
func (mock *QuerierMock) CreateBookCalls() []struct {
	Ctx context.Context
	Arg repository.CreateBookParams
} {
	var calls []struct {
		Ctx context.Context
		Arg repository.CreateBookParams
	}
	mock.lockCreateBook.RLock()
	calls = mock.calls.CreateBook
	mock.lockCreateBook.RUnlock()
	return calls
}

// DeleteAuthor calls DeleteAuthorFunc.
func (mock *QuerierMock) DeleteAuthor(ctx context.Context, id int64) error {
	if mock.DeleteAuthorFunc == nil {
		panic("QuerierMock.DeleteAuthorFunc: method is nil but Querier.DeleteAuthor was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAuthor.Lock()
	mock.calls.DeleteAuthor = append(mock.calls.DeleteAuthor, callInfo)
	mock.lockDeleteAuthor.Unlock()
	return mock.DeleteAuthorFunc(ctx, id)
}

// DeleteAuthorCalls gets all the calls that were made to DeleteAuthor.
// Check the length with:
//
//	len(mockedQuerier.DeleteAuthorCalls())
func (mock *QuerierMock) DeleteAuthorCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteAuthor.RLock()
	calls = mock.calls.DeleteAuthor
	mock.lockDeleteAuthor.RUnlock()
	return calls
}

// DeleteBook calls DeleteBookFunc.
func (mock *QuerierMock) DeleteBook(ctx context.Context, id int64) error {
	if mock.DeleteBookFunc == nil {
		panic("QuerierMock.DeleteBookFunc: method is nil but Querier.DeleteBook was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteBook.Lock()
	mock.calls.DeleteBook = append(mock.calls.DeleteBook, callInfo)
	mock.lockDeleteBook.Unlock()
	return mock.DeleteBookFunc(ctx, id)
}

// DeleteBookCalls gets all the calls that were made to DeleteBook.
// Check the length with:
//
//	len(mockedQuerier.DeleteBookCalls())
func (mock *QuerierMock) DeleteBookCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteBook.RLock()
	calls = mock.calls.DeleteBook
	mock.lockDeleteBook.RUnlock()
	return calls
}

// GetAuthor calls GetAuthorFunc.
func (mock *QuerierMock) GetAuthor(ctx context.Context, id int64) (repository.Author, error) {
	if mock.GetAuthorFunc == nil {
		panic("QuerierMock.GetAuthorFunc: method is nil but Querier.GetAuthor was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetAuthor.Lock()
	mock.calls.GetAuthor = append(mock.calls.GetAuthor, callInfo)
	mock.lockGetAuthor.Unlock()
	return mock.GetAuthorFunc(ctx, id)
}

// GetAuthorCalls gets all the calls that were made to GetAuthor.
// Check the length with:
//
//	len(mockedQuerier.GetAuthorCalls())
func (mock *QuerierMock) GetAuthorCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetAuthor.RLock()
	calls = mock.calls.GetAuthor
	mock.lockGetAuthor.RUnlock()
	return calls
}

// GetBook calls GetBookFunc.
func (mock *QuerierMock) GetBook(ctx context.Context, id int64) (repository.Book, error) {
	if mock.GetBookFunc == nil {
		panic("QuerierMock.GetBookFunc: method is nil but Querier.GetBook was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetBook.Lock()
	mock.calls.GetBook = append(mock.calls.GetBook, callInfo)
	mock.lockGetBook.Unlock()
	return mock.GetBookFunc(ctx, id)
}

// GetBookCalls gets all the calls that were made to GetBook.
// Check the length with:
//
//	len(mockedQuerier.GetBookCalls())
func (mock *QuerierMock) GetBookCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetBook.RLock()
	calls = mock.calls.GetBook
	mock.lockGetBook.RUnlock()
	return calls
}

// ListAuthors calls ListAuthorsFunc.
func (mock *QuerierMock) ListAuthors(ctx context.Context) ([]repository.Author, error) {
	if mock.ListAuthorsFunc == nil {
		panic("QuerierMock.ListAuthorsFunc: method is nil but Querier.ListAuthors was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListAuthors.Lock()
	mock.calls.ListAuthors = append(mock.calls.ListAuthors, callInfo)
	mock.lockListAuthors.Unlock()
	return mock.ListAuthorsFunc(ctx)
}

// ListAuthorsCalls gets all the calls that were made to ListAuthors.
// Check the length with:
//
//	len(mockedQuerier.ListAuthorsCalls())
func (mock *QuerierMock) ListAuthorsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListAuthors.RLock()
	calls = mock.calls.ListAuthors
	mock.lockListAuthors.RUnlock()
	return calls
}

// ListBooks calls ListBooksFunc.
func (mock *QuerierMock) ListBooks(ctx context.Context) ([]repository.Book, error) {
	if mock.ListBooksFunc == nil {
		panic("QuerierMock.ListBooksFunc: method is nil but Querier.ListBooks was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListBooks.Lock()
	mock.calls.ListBooks = append(mock.calls.ListBooks, callInfo)
	mock.lockListBooks.Unlock()
	return mock.ListBooksFunc(ctx)
}

// ListBooksCalls gets all the calls that were made to ListBooks.
// Check the length with:
//
//	len(mockedQuerier.ListBooksCalls())
func (mock *QuerierMock) ListBooksCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListBooks.RLock()
	calls = mock.calls.ListBooks
	mock.lockListBooks.RUnlock()
	return calls
}

// PartialUpdateAuthor calls PartialUpdateAuthorFunc.
func (mock *QuerierMock) PartialUpdateAuthor(ctx context.Context, arg repository.PartialUpdateAuthorParams) (repository.Author, error) {
	if mock.PartialUpdateAuthorFunc == nil {
		panic("QuerierMock.PartialUpdateAuthorFunc: method is nil but Querier.PartialUpdateAuthor was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg repository.PartialUpdateAuthorParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockPartialUpdateAuthor.Lock()
	mock.calls.PartialUpdateAuthor = append(mock.calls.PartialUpdateAuthor, callInfo)
	mock.lockPartialUpdateAuthor.Unlock()
	return mock.PartialUpdateAuthorFunc(ctx, arg)
}

// PartialUpdateAuthorCalls gets all the calls that were made to PartialUpdateAuthor.
// Check the length with:
//
//	len(mockedQuerier.PartialUpdateAuthorCalls())
func (mock *QuerierMock) PartialUpdateAuthorCalls() []struct {
	Ctx context.Context
	Arg repository.PartialUpdateAuthorParams
} {
	var calls []struct {
		Ctx context.Context
		Arg repository.PartialUpdateAuthorParams
	}
	mock.lockPartialUpdateAuthor.RLock()
	calls = mock.calls.PartialUpdateAuthor
	mock.lockPartialUpdateAuthor.RUnlock()
	return calls
}

// UpdateAuthor calls UpdateAuthorFunc.
func (mock *QuerierMock) UpdateAuthor(ctx context.Context, arg repository.UpdateAuthorParams) (repository.Author, error) {
	if mock.UpdateAuthorFunc == nil {
		panic("QuerierMock.UpdateAuthorFunc: method is nil but Querier.UpdateAuthor was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg repository.UpdateAuthorParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockUpdateAuthor.Lock()
	mock.calls.UpdateAuthor = append(mock.calls.UpdateAuthor, callInfo)
	mock.lockUpdateAuthor.Unlock()
	return mock.UpdateAuthorFunc(ctx, arg)
}

// UpdateAuthorCalls gets all the calls that were made to UpdateAuthor.
// Check the length with:
//
//	len(mockedQuerier.UpdateAuthorCalls())
func (mock *QuerierMock) UpdateAuthorCalls() []struct {
	Ctx context.Context
	Arg repository.UpdateAuthorParams
} {
	var calls []struct {
		Ctx context.Context
		Arg repository.UpdateAuthorParams
	}
	mock.lockUpdateAuthor.RLock()
	calls = mock.calls.UpdateAuthor
	mock.lockUpdateAuthor.RUnlock()
	return calls
}

// UpdateTitleBook calls UpdateTitleBookFunc.
func (mock *QuerierMock) UpdateTitleBook(ctx context.Context, arg repository.UpdateTitleBookParams) (repository.Book, error) {
	if mock.UpdateTitleBookFunc == nil {
		panic("QuerierMock.UpdateTitleBookFunc: method is nil but Querier.UpdateTitleBook was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg repository.UpdateTitleBookParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockUpdateTitleBook.Lock()
	mock.calls.UpdateTitleBook = append(mock.calls.UpdateTitleBook, callInfo)
	mock.lockUpdateTitleBook.Unlock()
	return mock.UpdateTitleBookFunc(ctx, arg)
}

// UpdateTitleBookCalls gets all the calls that were made to UpdateTitleBook.
// Check the length with:
//
//	len(mockedQuerier.UpdateTitleBookCalls())
func (mock *QuerierMock) UpdateTitleBookCalls() []struct {
	Ctx context.Context
	Arg repository.UpdateTitleBookParams
} {
	var calls []struct {
		Ctx context.Context
		Arg repository.UpdateTitleBookParams
	}
	mock.lockUpdateTitleBook.RLock()
	calls = mock.calls.UpdateTitleBook
	mock.lockUpdateTitleBook.RUnlock()
	return calls
}
